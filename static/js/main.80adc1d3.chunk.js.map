{"version":3,"sources":["Todos.js","addtodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todos","deletetodo","todosList","length","map","todo","className","key","id","content","onClick","AddTodo","state","handleSubmit","e","preventDefault","props","addtodo","setState","handleChange","target","value","onSubmit","this","type","onChange","Component","App","deleteTodo","filter","console","log","Math","floor","Date","getTime","random","todolist","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MA2BeA,EAxBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,WAEXC,EAAYF,EAAMG,OACpBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,sBAAsBC,IAAKF,EAAKG,IAC3C,0BAAMF,UAAU,WAAWD,EAAKI,SAChC,0BAAMH,UAAU,yBAChB,0BAAMA,UAAU,UACZ,4BAAQA,UAAU,qCAAoCI,QAAS,WAAKT,EAAWI,EAAKG,MAAM,uBAAGF,UAAU,wBAAb,SAA1F,cAMhB,uBAAGA,UAAU,UAAb,oBAEJ,OACI,yBAAKA,UAAU,oBACdJ,ICQMS,E,4MA1BXC,MAAQ,CACJH,QAAS,I,EAEbI,aAAe,SAACC,GACZA,EAAEC,iBACF,EAAKC,MAAMC,QAAQ,EAAKL,OACxB,EAAKM,SAAS,CACVT,QAAQ,M,EAGhBU,aAAe,SAACL,GACZ,EAAKI,SAAS,CACVT,QAASK,EAAEM,OAAOC,S,uDAItB,OACI,6BACI,0BAAMC,SAAUC,KAAKV,cACjB,iDACA,2BAAOW,KAAM,OAAOC,SAAUF,KAAKJ,aAAcE,MAAOE,KAAKX,MAAMH,gB,GAtBjEiB,aCuCPC,E,4MAlCbf,MAAQ,CACNZ,MAAO,CACL,CAACQ,GAAG,EAAEC,QAAQ,iBACd,CAACD,GAAG,EAAIC,QAAQ,qB,EAGtBmB,WAAa,SAACpB,GACZ,IAAMR,EAAQ,EAAKY,MAAMZ,MAAM6B,QAAO,SAAAxB,GACpC,OAAOA,EAAKG,KAAOA,KAErB,EAAKU,SAAS,CACZlB,MAAMA,IAER8B,QAAQC,IAAI,YAAavB,I,EAE3BS,QAAU,SAACZ,GACTA,EAAKG,GAAKwB,KAAKC,OAAO,IAAIC,MAAOC,UAAYH,KAAKI,UAGlD,IAAIC,EAAQ,sBAAO,EAAKzB,MAAMZ,OAAlB,CAAwBK,IACpC,EAAKa,SAAS,CACZlB,MAAMqC,K,uDAIR,OACE,yBAAK/B,UAAU,qBACd,wBAAIA,UAAY,oBAAhB,8BACA,kBAAC,EAAD,CAAMN,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAcsB,KAAKK,aACnD,kBAAC,EAAD,CAASX,QAASM,KAAKN,e,GA/BTS,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.80adc1d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Todo = ({todos,deletetodo}) =>{\r\n\r\n    const todosList = todos.length ? (\r\n        todos.map(todo => {\r\n            return(\r\n                <div className=\"collection-item row\" key={todo.id}>\r\n                    <span className=\"col s4 \">{todo.content}</span>\r\n                    <span className=\"col s3 center push-s5\">\r\n                    <span className=\"centre\">\r\n                        <button className=\"waves-effect waves-green blue btn \"onClick={()=>{deletetodo(todo.id)}}><i className=\"material-icons right\">check</i>Done</button>\r\n                    </span></span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center\">You have nothing</p>\r\n    ) \r\n    return(\r\n        <div className=\"todos collection\">\r\n        {todosList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React,{Component} from 'react' ;\r\n\r\nclass AddTodo extends Component{\r\n\r\n    state = {\r\n        content: ''\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addtodo(this.state);\r\n        this.setState({\r\n            content:''\r\n        })\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Add new todo: </label>\r\n                    <input type= \"text\" onChange={this.handleChange} value={this.state.content}></input>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddTodo","import React , {Component} from 'react';\nimport Todo from './Todos'\nimport AddTodo from './addtodo'\n\n\nclass App extends Component {\n\n  state = {\n    todos: [\n      {id:1,content:'Buy some milk'},\n      {id:2 , content:'Play mario Kart'}\n    ]\n  }\ndeleteTodo = (id) =>{\n  const todos = this.state.todos.filter(todo => {\n    return todo.id !== id\n  })\n  this.setState({\n    todos:todos \n  })\n  console.log('Deleted: '+ id)\n}\naddtodo = (todo) =>{\n  todo.id = Math.floor((new Date().getTime())*(Math.random()));\n  \n  \n  let todolist = [...this.state.todos,todo] ;\n  this.setState({\n    todos:todolist\n  })\n}\nrender(){\n  return (\n    <div className=\"todoapp container\">\n     <h1 className = 'center blue-text'> Todo's (Made in React.js)</h1>\n     <Todo todos={this.state.todos} deletetodo = {this.deleteTodo}/>\n    <AddTodo addtodo={this.addtodo}/>\n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}